#pragma version =0.4.6;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

;; build.tact_WithdrawalManager.headers.fc
;;
;; Header files for WithdrawalManager
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; $DeployOk$_store
builder $DeployOk$_store(builder build_0, (int) v) inline;

;; $DeployOk$_store_cell
cell $DeployOk$_store_cell((int) v, builder b) inline;

;; $WithdrawalManager$_store
builder $WithdrawalManager$_store(builder build_0, (slice, slice, slice, int, int, int, int) v) inline;

;; $WithdrawalManager$_load
(slice, ((slice, slice, slice, int, int, int, int))) $WithdrawalManager$_load(slice sc_0) inline;

;; $Context$_get_value
_ $Context$_get_value((int, slice, int, slice) v) inline;

;; $WithdrawalStats$_to_external
(int, int, int, int) $WithdrawalStats$_to_external(((int, int, int, int)) v) inline;

;; $WithdrawalManager$init$_load
(slice, ((slice, slice, slice))) $WithdrawalManager$init$_load(slice sc_0) inline;

;; $WithdrawalManager$_contract_init
(slice, slice, slice, int, int, int, int) $WithdrawalManager$_contract_init(slice $jettonMaster, slice $gameJettonWallet, slice $owner) impure inline;

;; $WithdrawalManager$_contract_load
(slice, slice, slice, int, int, int, int) $WithdrawalManager$_contract_load() impure inline;

;; $WithdrawalManager$_contract_store
() $WithdrawalManager$_contract_store((slice, slice, slice, int, int, int, int) v) impure inline;

;; $WithdrawalStats$_constructor_processedRequests_totalWithdrawn_totalGasCollected_isPaused
((int, int, int, int)) $WithdrawalStats$_constructor_processedRequests_totalWithdrawn_totalGasCollected_isPaused(int $processedRequests, int $totalWithdrawn, int $totalGasCollected, int $isPaused) inline;

;; $WithdrawalManager$_fun_getStats
((slice, slice, slice, int, int, int, int), (int, int, int, int)) $WithdrawalManager$_fun_getStats((slice, slice, slice, int, int, int, int) $self) impure inline_ref;

;; $MessageParameters$_constructor_bounce_to_value_mode_body
((int, cell, int, slice, int)) $MessageParameters$_constructor_bounce_to_value_mode_body(int $bounce, slice $to, int $value, int $mode, cell $body) inline;

;; $WithdrawalManager$_fun_notify
((slice, slice, slice, int, int, int, int), ()) $WithdrawalManager$_fun_notify((slice, slice, slice, int, int, int, int) $self, cell $body) impure inline;

;; $DeployOk$_constructor_queryId
((int)) $DeployOk$_constructor_queryId(int $queryId) inline;


;; build.tact_WithdrawalManager.stdlib.fc
global (int, slice, int, slice) __tact_context;
global slice __tact_context_sender;
global cell __tact_child_contract_codes;
global int __tact_randomized;

(int, slice, int, slice) __tact_context_get() inline {
    return __tact_context;
}

slice __tact_context_get_sender() inline {
    return __tact_context_sender;
}

int $global_myBalance() impure asm """
    BALANCE FIRST
""";

() $global_nativeReserve(int $amount, int $mode) impure asm """
    RAWRESERVE
""";

() $global_message((int, cell, int, slice, int) $params) impure asm """
    NEWC
    b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
    1 STI               // store `bounce`
    b{000} STSLICECONST // store bounced = false and src = addr_none
    STSLICE             // store `to`
    SWAP
    STGRAMS             // store `value`
    106 PUSHINT         // 1 + 4 + 4 + 64 + 32 + 1
    STZEROES
    // â†’ Stack state
    // s0: Builder
    // s1: `body`
    // s2: `mode`
    STDICT
    ENDC
    SWAP
    SENDRAWMSG
""";

((slice, slice, slice, int, int, int, int), ()) $WithdrawalManager$_fun_notify((slice, slice, slice, int, int, int, int) $self, cell $body) impure inline {
    var (($self'jettonMaster, $self'gameJettonWallet, $self'owner, $self'processedRequests, $self'totalWithdrawn, $self'totalGasCollected, $self'isPaused)) = $self;
    slice $to = __tact_context_get_sender();
    int $bounce = false;
    if (false) {
        int $balance = $global_myBalance();
        int $balanceBeforeMessage = ($balance - $Context$_get_value(__tact_context_get()));
        if (($balanceBeforeMessage < 0)) {
            $global_nativeReserve(0, 0);
            $global_message($MessageParameters$_constructor_bounce_to_value_mode_body($bounce, $to, 0, 130, $body));
            return (($self'jettonMaster, $self'gameJettonWallet, $self'owner, $self'processedRequests, $self'totalWithdrawn, $self'totalGasCollected, $self'isPaused), ());
        }
    }
    $global_message($MessageParameters$_constructor_bounce_to_value_mode_body($bounce, $to, 0, 66, $body));
    return (($self'jettonMaster, $self'gameJettonWallet, $self'owner, $self'processedRequests, $self'totalWithdrawn, $self'totalGasCollected, $self'isPaused), ());
}

;; build.tact_WithdrawalManager.storage.fc
;;
;; Type: Context
;; TLB: _ bounceable:bool sender:address value:int257 raw:^slice = Context
;;

_ $Context$_get_value((int, slice, int, slice) v) inline {
    var (v'bounceable, v'sender, v'value, v'raw) = v;
    return v'value;
}

;;
;; Type: MessageParameters
;; TLB: _ mode:int257 body:Maybe ^cell value:int257 to:address bounce:bool = MessageParameters
;;

((int, cell, int, slice, int)) $MessageParameters$_constructor_bounce_to_value_mode_body(int $bounce, slice $to, int $value, int $mode, cell $body) inline {
    return ($mode, $body, $value, $to, $bounce);
}

;;
;; Type: DeployOk
;; Header: 0xaff90f57
;; TLB: deploy_ok#aff90f57 queryId:uint64 = DeployOk
;;

builder $DeployOk$_store(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 2952335191, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell $DeployOk$_store_cell((int) v, builder b) inline {
    return $DeployOk$_store(b, v).end_cell();
}

((int)) $DeployOk$_constructor_queryId(int $queryId) inline {
    return ($queryId);
}

;;
;; Type: WithdrawalStats
;; TLB: _ processedRequests:int257 totalWithdrawn:int257 totalGasCollected:int257 isPaused:bool = WithdrawalStats
;;

(int, int, int, int) $WithdrawalStats$_to_external(((int, int, int, int)) v) inline {
    var (v'processedRequests, v'totalWithdrawn, v'totalGasCollected, v'isPaused) = v; 
    return (v'processedRequests, v'totalWithdrawn, v'totalGasCollected, v'isPaused);
}

((int, int, int, int)) $WithdrawalStats$_constructor_processedRequests_totalWithdrawn_totalGasCollected_isPaused(int $processedRequests, int $totalWithdrawn, int $totalGasCollected, int $isPaused) inline {
    return ($processedRequests, $totalWithdrawn, $totalGasCollected, $isPaused);
}

;;
;; Type: WithdrawalManager
;; TLB: _ jettonMaster:address gameJettonWallet:address owner:address processedRequests:int257 totalWithdrawn:int257 totalGasCollected:int257 isPaused:bool = WithdrawalManager
;;

builder $WithdrawalManager$_store(builder build_0, (slice, slice, slice, int, int, int, int) v) inline {
    var (v'jettonMaster, v'gameJettonWallet, v'owner, v'processedRequests, v'totalWithdrawn, v'totalGasCollected, v'isPaused) = v;
    build_0 = build_0.store_slice(v'jettonMaster);
    build_0 = build_0.store_slice(v'gameJettonWallet);
    build_0 = build_0.store_slice(v'owner);
    var build_1 = begin_cell();
    build_1 = build_1.store_int(v'processedRequests, 257);
    build_1 = build_1.store_int(v'totalWithdrawn, 257);
    build_1 = build_1.store_int(v'totalGasCollected, 257);
    build_1 = build_1.store_int(v'isPaused, 1);
    build_0 = store_builder_ref(build_0, build_1);
    return build_0;
}

(slice, ((slice, slice, slice, int, int, int, int))) $WithdrawalManager$_load(slice sc_0) inline {
    var v'jettonMaster = sc_0~load_msg_addr();
    var v'gameJettonWallet = sc_0~load_msg_addr();
    var v'owner = sc_0~load_msg_addr();
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'processedRequests = sc_1~load_int(257);
    var v'totalWithdrawn = sc_1~load_int(257);
    var v'totalGasCollected = sc_1~load_int(257);
    var v'isPaused = sc_1~load_int(1);
    return (sc_0, (v'jettonMaster, v'gameJettonWallet, v'owner, v'processedRequests, v'totalWithdrawn, v'totalGasCollected, v'isPaused));
}

(slice, ((slice, slice, slice))) $WithdrawalManager$init$_load(slice sc_0) inline {
    var v'jettonMaster = sc_0~load_msg_addr();
    var v'gameJettonWallet = sc_0~load_msg_addr();
    var v'owner = sc_0~load_msg_addr();
    return (sc_0, (v'jettonMaster, v'gameJettonWallet, v'owner));
}

(slice, slice, slice, int, int, int, int) $WithdrawalManager$_contract_load() impure inline {
    slice $sc = get_data().begin_parse();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$WithdrawalManager$_load();
    }
    else {
        (slice $jettonMaster, slice $gameJettonWallet, slice $owner) = $sc~$WithdrawalManager$init$_load();
        $sc.end_parse();
        return $WithdrawalManager$_contract_init($jettonMaster, $gameJettonWallet, $owner);
    }
}

() $WithdrawalManager$_contract_store((slice, slice, slice, int, int, int, int) v) impure inline {
    builder b = begin_cell();
    b = b.store_int(true, 1);
    b = $WithdrawalManager$_store(b, v);
    set_data(b.end_cell());
}

;;
;; Contract WithdrawalManager functions
;;

(slice, slice, slice, int, int, int, int) $WithdrawalManager$_contract_init(slice $jettonMaster, slice $gameJettonWallet, slice $owner) impure inline {
    var (($self'jettonMaster, $self'gameJettonWallet, $self'owner, $self'processedRequests, $self'totalWithdrawn, $self'totalGasCollected, $self'isPaused)) = (null(), null(), null(), 0, 0, 0, false);
    $self'jettonMaster = $jettonMaster;
    $self'gameJettonWallet = $gameJettonWallet;
    $self'owner = $owner;
    return ($self'jettonMaster, $self'gameJettonWallet, $self'owner, $self'processedRequests, $self'totalWithdrawn, $self'totalGasCollected, $self'isPaused);
}

((slice, slice, slice, int, int, int, int), (int, int, int, int)) $WithdrawalManager$_fun_getStats((slice, slice, slice, int, int, int, int) $self) impure inline_ref {
    var (($self'jettonMaster, $self'gameJettonWallet, $self'owner, $self'processedRequests, $self'totalWithdrawn, $self'totalGasCollected, $self'isPaused)) = $self;
    var $fresh$ret_0 = $WithdrawalStats$_constructor_processedRequests_totalWithdrawn_totalGasCollected_isPaused($self'processedRequests, $self'totalWithdrawn, $self'totalGasCollected, $self'isPaused);
    return (($self'jettonMaster, $self'gameJettonWallet, $self'owner, $self'processedRequests, $self'totalWithdrawn, $self'totalGasCollected, $self'isPaused), $fresh$ret_0);
}

;;
;; Get methods of a Contract WithdrawalManager
;;

_ %getStats() method_id(104054) {
    var self = $WithdrawalManager$_contract_load();
    var res = self~$WithdrawalManager$_fun_getStats();
    return $WithdrawalStats$_to_external(res);
}

;;
;; Routing of a Contract WithdrawalManager
;;

;; message opcode reader utility: only binary receivers
;; Returns 32 bit message opcode, otherwise throws the "Invalid incoming message" exit code
(slice, int) ~load_opcode_internal(slice s) asm( -> 1 0) "32 LDUQ 130 THROWIFNOT";

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    cs~skip_bits(2);
    var msg_bounceable = cs~load_int(1);
    var msg_bounced = cs~load_int(1);
    slice msg_sender_addr = cs~load_msg_addr();
    __tact_context = (msg_bounceable, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var ($self'jettonMaster, $self'gameJettonWallet, $self'owner, $self'processedRequests, $self'totalWithdrawn, $self'totalGasCollected, $self'isPaused) = $WithdrawalManager$_contract_load();
    
    ;; Handle bounced messages
    if (msg_bounced) { return (); }
    int op = 0;
    int in_msg_length = slice_bits(in_msg);
    if (in_msg_length >= 32) {
        op = in_msg~load_uint(32);
        ;; Receive RequestWithdrawal message
        if (op == 3494308786) {
            var $msg'jetton_amount = in_msg~load_varuint16();
            var $msg'ton_address = in_msg~load_msg_addr();
            var $msg'callback_addr = in_msg~load_msg_addr();
            throw_unless(19792, (~ $self'isPaused));
            throw_unless(14281, ($msg'jetton_amount >= 100000000));
            $self'processedRequests = ($self'processedRequests + 1);
            $self'totalWithdrawn = ($self'totalWithdrawn + $msg'jetton_amount);
            $WithdrawalManager$_contract_store(($self'jettonMaster, $self'gameJettonWallet, $self'owner, $self'processedRequests, $self'totalWithdrawn, $self'totalGasCollected, $self'isPaused));
            return ();
        }
        
        ;; Receive ApproveWithdrawal message
        if (op == 1956174858) {
            var $msg'request_id = in_msg~load_uint(64);
            throw_unless(33965, ( equal_slices_bits(__tact_context_get_sender(), $self'owner) ));
            $WithdrawalManager$_contract_store(($self'jettonMaster, $self'gameJettonWallet, $self'owner, $self'processedRequests, $self'totalWithdrawn, $self'totalGasCollected, $self'isPaused));
            return ();
        }
        
        ;; Receive RejectWithdrawal message
        if (op == 1211889582) {
            var $msg'request_id = in_msg~load_uint(64);
            var $msg'reason = in_msg~load_ref().begin_parse();
            throw_unless(35396, ( equal_slices_bits(__tact_context_get_sender(), $self'owner) ));
            $WithdrawalManager$_contract_store(($self'jettonMaster, $self'gameJettonWallet, $self'owner, $self'processedRequests, $self'totalWithdrawn, $self'totalGasCollected, $self'isPaused));
            return ();
        }
        
        ;; Receive Deploy message
        if (op == 0x946a98b6) {
            var $deploy'queryId = in_msg~load_uint(64);
            ($self'jettonMaster, $self'gameJettonWallet, $self'owner, $self'processedRequests, $self'totalWithdrawn, $self'totalGasCollected, $self'isPaused)~$WithdrawalManager$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId), begin_cell()));
            $WithdrawalManager$_contract_store(($self'jettonMaster, $self'gameJettonWallet, $self'owner, $self'processedRequests, $self'totalWithdrawn, $self'totalGasCollected, $self'isPaused));
            return ();
        }
        
    }
    ;; Empty Receiver and Text Receivers
    var text_op = slice_hash(in_msg);
    ;; Receive "pause" message
    if (text_op == 0x372d2cd103ef0b1ab133fb90b123d320b1e02cbb8aece55c08f4f1a778932736) {
        throw_unless(26078, ( equal_slices_bits(__tact_context_get_sender(), $self'owner) ));
        $self'isPaused = true;
        $WithdrawalManager$_contract_store(($self'jettonMaster, $self'gameJettonWallet, $self'owner, $self'processedRequests, $self'totalWithdrawn, $self'totalGasCollected, $self'isPaused));
        return ();
    }
    ;; Receive "resume" message
    if (text_op == 0x7d007a8451af3f033f0141ee07e1683a056ac1e060b1af864842294b1de8b57b) {
        throw_unless(41003, ( equal_slices_bits(__tact_context_get_sender(), $self'owner) ));
        $self'isPaused = false;
        $WithdrawalManager$_contract_store(($self'jettonMaster, $self'gameJettonWallet, $self'owner, $self'processedRequests, $self'totalWithdrawn, $self'totalGasCollected, $self'isPaused));
        return ();
    }
    ;; Throw if not handled
    throw(130);
}


() __tact_selector_hack_asm() impure asm """
@atend @ 1 {
        execute current@ context@ current!
        {
            // The core idea of this function is to save gas by avoiding unnecessary dict jump, when recv_internal/recv_external is called
            // We want to extract recv_internal/recv_external from the dict and select needed function
            // not by jumping to the needed function by it's index, but by using usual IF statements.

            }END> b> // Close previous builder, now we have a cell of previous code on top of the stack

            <{ // Start of the new code builder
                SETCP0
                // Swap the new code builder with the previous code, now we have previous code on top of the stack
                swap
                // Transform cell to slice and load first ref from the previous code, now we have the dict on top of the stack
                <s ref@

                // Extract the recv_internal from the dict
                dup 0 swap @procdictkeylen idict@ { "internal shortcut error" abort } ifnot
                swap

                // Delete the recv_internal from the dict
                0 swap @procdictkeylen idict- drop
                // Delete the recv_external from the dict (it's okay if it's not there)
                -1 swap @procdictkeylen idict- drop
                // Delete the __tact_selector_hack from the dict
                65535 swap @procdictkeylen idict- drop

                // Bring the code builder from the bottom of the stack
                // because if recv_external extraction is optional, and the number of elements on the stack is not fixed
                depth 1- roll
                // Swap with the dict from which we extracted recv_internal and (maybe) recv_external
                swap

                // Check if the dict is empty
                dup null?
                // Store a copy of this flag in the bottom of the stack
                dup depth 1- -roll
                {
                    // If the dict is empty, just drop it (it will be null if it's empty)
                    drop
                }
                {
                    // If the dict is not empty, prepare continuation to be stored in c3
                    <{
                        // Save this dict as first ref in this continuation, it will be pushed in runtime by DICTPUSHCONST
                        swap @procdictkeylen DICTPUSHCONST
                        // Jump to the needed function by it's index
                        DICTIGETJMPZ
                        // If such key is not found, throw 11 along with the key as an argument
                        11 THROWARG
                    }> PUSHCONT
                    // Store the continuation in c3
                    c3 POP
                } cond

                // Function id is on top of the (runtime) stack
                DUP IFNOTJMP:<{
                    // place recv_internal here
                    DROP swap @addop
                }>

                // Bring back the flag, indicating if the dict is empty or not from the bottom of the stack
                depth 1- roll
                {
                    // If the dict is empty, throw 11
                    11 THROWARG
                }
                {
                    // If the dict is not empty, jump to continuation from c3
                    c3 PUSH JMPX
                } cond
            }> b>
        } : }END>c
        current@ context! current!
    } does @atend !
""";

() __tact_selector_hack() method_id(65535) {
    return __tact_selector_hack_asm();
}